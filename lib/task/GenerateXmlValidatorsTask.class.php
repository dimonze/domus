<?php

class GenerateXmlValidatorsTask extends sfBaseTask {
  public function configure() {

    $this->namespace        = 'domus';
    $this->name             = 'generatexmlvalidators';
  }

  public function execute($arguments = array(), $options = array()){
    $this->logSection('Start execute','');

    $configuration = ProjectConfiguration::getApplicationConfiguration('frontend', 'dev', true);
    $context = sfContext::createInstance($configuration);
    $databaseManager = new sfDatabaseManager($configuration);

    chdir(__DIR__.'/../../data/xml-validation/');

    $conn = Doctrine::getTable('FormItem')->getConnection();

    $types = array_keys(Lot::$types);
    $tpl  = file_get_contents('template.xml');
    $ident = str_repeat(' ', 12);

    foreach($types as $name){
      list($cat,$type) = explode('-', $name);

      $stmt = $conn->prepare("
        SELECT fi.id, fi.xml_name, fi.type, fo.required, fi.value
        FROM form_item as fo
        RIGHT JOIN form_field as fi
        ON fo.field_id = fi.id
        WHERE fo.type = ?");
      $stmt->execute(array($name));

      $this->logSection('Generate', $name);
      $more = '';
      foreach($stmt->fetchAll(Doctrine::FETCH_ASSOC) as $field){

        $rule = '';

        //if(!$field['required']){
        if(true){
          $rule .= '<optional>';
        }

        switch ($field['type']) {
          case 'float':   /* Go next */

          case 'integer':
            $rule .= '<element name="' . $field['xml_name'] . '">' . ($field['required'] ? '<data type="float"/>' : '<ref name="any"/>') . '</element>';
          break;

          case 'price':
            if($field['required']) {
              $rule .= '<element name="' . $field['xml_name'] . '">';
                $rule .= '<interleave>';
                  $rule .= '<element name="value">';
                    $rule .= '<data type="float"/>';
                  $rule .= '</element>';
                  $rule .= '<element name="currency">';
                    $rule .= '<choice>';
                      $rule .= '<value>RUR</value>';
                      $rule .= '<value>EUR</value>';
                      $rule .= '<value>USD</value>';
                    $rule .= '</choice>';
                  $rule .= '</element>';
                $rule .= '</interleave>';
              $rule .= '</element>';
            }
            else {
              $rule .= '<element name="' . $field['xml_name'] . '">';
                $rule .= '<interleave>';
                $rule .= '<element name="value"><ref name="any"/></element>';
                $rule .= '<element name="currency"><ref name="any"/></element>';
                $rule .= '</interleave>';
              $rule .= '</element>';
            }
          break;

          case 'year':
            $rule .= '<element name="' . $field['xml_name'] . '">' . ($field['required'] ? '<data type="gYear"/>' : '<ref name="any"/>') . '</element>';
          break;

          case 'select': /* Go next */

          case 'radio': /* Go next */ /*
            $variants = explode("\n",trim($field['value']));
            $rule .= '<element name="' . $field['xml_name'] . '">';
              $rule .= '<choice>';
                $rule .= '<value>' . implode('</value><value>', $variants) . '</value>';
              $rule .= '</choice>';
            $rule .= '</element>';
          break;*/

          case 'radiocombo': /* Go next */

          case 'multiple':
            if($field['xml_name'] == 'offer-type'){
              $rule .= '<ref name="' . $cat . '-ot"/>';
            }
            else{
              $rule .= '<element name="' . $field['xml_name'] . '">'
                    . ($field['required'] ? '<ref name="nonEmpty"/>' : '<ref name="any"/>')
                    . '</element>';
            }
          break;

          default: $rule .= '<!-- ' . print_r($field,1) . ' -->';
        }


        //if(!$field['required']){
        if(true){
          $rule .= '</optional>';
        }

        $more .= $ident . $rule . "\n";
      }
      $stmt->closeCursor();

      $more = '<!-- autogenerated -->' . "\n" . $more . $ident . '<!-- /autogenerated -->';

      $street = $cat == 'apartament' ? 'street-required' : 'street-optional';


      $output = str_replace(
              array('<!-- __cat__ -->', '<!-- __type__ -->', '<!-- __more__ -->', '<!-- __street__ -->'),
              array($cat,$type,$more,$street),
              $tpl);
      file_put_contents($name.'.rng.xml',$output);
    }
  }
}
