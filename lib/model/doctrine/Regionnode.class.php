<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Regionnode extends BaseRegionnode
{
  public static
    $districts = array(
      77 => array(
        'САО'  => array(
          'м. Речной вокзал',            'м. Водный Стадион',
          'м. Войковская',               'м. Сокол',
          'м. Аэропорт',                 'м. Динамо',
          'м. Полежаевская',             'м. Беговая',
          'м. Петровско-Разумовская',    'м. Тимирязевская',
        ),
        'СВАО' => array(
          'м. ВДНХ',                     'м. Медведково',
          'м. Бабушкинская',             'м. Свиблово',
          'м. Ботанический Сад',         'м. Алексеевская',
          'м. Алтуфьево',                'м. Бибирево',
          'м. Отрадное',                 'м. Владыкино',
          'м. Дмитровская',              'м. Савеловская',
        ),
        'ВАО'  => array(
          'м. Новогиреево',              'м. Перово',
          'м. Шоссе Энтузиастов',        'м. Щелковская',
          'м. Первомайская',             'м. Измайловская',
          'м. Измайловский Парк',        'м. Семеновская',
          'м. Электрозаводская',         'м. Улица Подбельского',
          'м. Черкизовская',             'м. Преображенская площадь',
          'м. Сокольники',               'м. Выхино',
          'м. Партизанская'
        ),
        'ЮВАО' => array(
          'м. Авиамоторная',             'м. Волгоградский Пр-т',
          'м. Текстильщики',             'м. Кузьминки',
          'м. Рязанский Пр-т',       'м. Дубровка',
          'м. Кожуховская',              'м. Печатники',
          'м. Волжская',                 'м. Люблино',
          'м. Братиславская',            'м. Марьино',
        ),
        'ЮАО'  => array(
          'м. Шаболовская',              'м. Автозаводская',
          'м. Коломенская',              'м. Каширская',
          'м. Кантемировская',           'м. Царицыно',
          'м. Орехово',                  'м. Домодедовская',
          'м. Красногвардейская',        'м. Варшавская',
          'м. Тульская',                 'м. Нагатинская',
          'м. Нагорная',                 'м. Южная',
          'м. Пражская',                 'м. Улица Академика Янгеля',
          'м. Аннино',
        ),
        'ЮЗАО' => array(
          'м. Ленинский проспект',       'м. Академическая',
          'м. Профсоюзная',              'м. Новые Черемушки',
          'м. Калужская',                'м. Беляево',
          'м. Коньково',                 'м. Теплый Стан',
          'м. Ясенево',                  'м. Битцевский Парк',
          'м. Каховская',                'м. Университет',
          'м. Нахимовский пр-т',         'м. Севастопольская',
          'м. Чертановская',             'м. Бульвар Дмитрия Донского',
        ),
        'ЗАО'  => array(
          'м. Киевская',                 'м. Парк Победы',
          'м. Проспект Вернадского',     'м. Юго-западная',
          'м. Крылатское',               'м. Молодежная',
          'м. Кунцевская',               'м. Пионерская',
          'м. Филевский Парк',           'м. Багратионовская',
          'м. Фили',                     'м. Кутузовская',
          'м. Студенческая',             'м. Киевская',
          'м. Славянский бульвар'
        ),
        'СЗАО' => array(
          'м. Планерная',                'м. Сходненская',
          'м. Тушинская',                'м. Щукинская',
          'м. Октябрьское поле',
        ),
        'ЦАО'  => array(
          'м. Рижская',                  'м. Проспект Мира',
          'м. Сухаревская',              'м. Тургеневская',
          'м. Китай-город',              'м. Третьяковская',
          'м. Октябрьская',              'м. Белорусская',
          'м. Маяковская',               'м. Тверская',
          'м. Театральная',              'м. Новокузнецкая',
          'м. Павелецкая',               'м. Площадь Ильича',
          'м. Марксистская',             'м. Третьяковская',
          'м. Бауманская',               'м. Курская',
          'м. Площадь Pеволюции',        'м. Арбатская',
          'м. Смоленская(Филевская)',    'м. Красносельская',
          'м. Комсомольская',            'м. Красные Ворота',
          'м. Чистые Пруды',             'м. Лубянка',
          'м. Охотный Ряд',              'м. Библиотека им. Ленина',
          'м. Парк Культуры',            'м. Фрунзенская',
          'м. Спортивная',               'м. Воробьевы горы',
          'м. Кропоткинская',            'м. Смоленская',
          'м. Арбатская(Филевская)',     'м. Александровский Сад',
          'м. Проспект Мира',            'м. Комсомольская',
          'м. Курская',                  'м. Таганская',
          'м. Павелецкая',               'м. Добрынинская',
          'м. Октябрьская',              'м. Парк Культуры',
          'м. Краснопресненская',        'м. Белорусская',
          'м. Новослободская',           'м. Улица 1905 года',
          'м. Баррикадная',              'м. Пушкинская',
          'м. Кузнецкий Мост',           'м. Китай-Город',
          'м. Пролетарская',             'м. Таганская',
          'м. Менделеевская',            'м. Цветной Бульвар',
          'м. Чеховская',                'м. Боровицкая',
          'м. Полянка',                  'м. Серпуховская',
          'м. Сретенский Бульвар',       'м. Крестьянская Застава',
          'м. Чкаловская'
        ),
      ),
    ),

    $nodot = array(
        'аал','АО','арбан','аул','волость','высел','городок','ж/д_будка',
        'ж/д_пост','заимка','казарма','край','остров','починок','промзона',
        'аллея','въезд','заезд','кольцо','линия','п/о','б-р','кв-л','п/р',
        'п/ст','парк','переезд','пл-ка','полустанок','починок','пр-кт',
        'проезд','просек','проселок','проулок','сад','сквер','спуск','тракт',
      'кп', 'пгт', 'р-н', 'с/а', 'с/о', 'с/с', 'ст-ца', 'м.', 'район', 'шоссе', 
        'горсовет', 'переулок', 'площадь'),
    $socrbefore = array(
        'г.', 'городок', 'д.', 'ж/д_будка', 'ж/д_казарм.', 'ж/д_оп.',
        'ж/д_платф.', 'ж/д_пост', 'ж/д_рзд.', 'ж/д_ст.', 'казарма', 'кп', 'мкр.',
        'остров', 'п/о', 'п/р', 'п/ст', 'пгт', 'починок', 'Респ.', 'рзд.', 'с.',
        'с/о', 'с/с', 'сл.', 'ст.', 'тер.', 'у.', 'ул.', 'х.', 'аул', 'б-р',
        'высел', 'дор.', 'заезд', 'п.', 'платф.', 'м.', 'район', 'ш.', 'аллея');

  public static function formatName($name, $socr) {
    if (empty($socr)) {
      return $name;
    }

    if (!in_array($socr, self::$nodot)) {
      $socr = "$socr.";
    }

    if (in_array($socr, self::$socrbefore)) {
      return "$socr $name";
    }
    else {
      return "$name $socr";
    }
  }

  public static function unformatName($text)
  {
    $text = trim($text);
    $regexps = array();

    foreach (self::$socrbefore as $item) {
      $regexps[] = sprintf('/^(%s)\.?\s+/', preg_quote($item, '/'));
    }
    foreach (self::$nodot as $item) {
      if (!in_array($item, self::$socrbefore)) {
        $regexps[] = sprintf('/\s+(%s)$/', preg_quote($item, '/'));
      }
    }
    $regexps[] = '/\s+(\S+)\.$/';

    foreach ($regexps as $regexp) {
      if (preg_match($regexp, $text, $matches)) {
        return array(preg_replace($regexp, '', $text), $matches[1]);
      }
    }

    return array($text, '');
  }

  public function getFullName () {
    return self::formatName($this->name, $this->socr);
  }

  public function getSeoText($section, $real_estate_type = null)
  {
    foreach ($this->SeoTexts as $seo_text) {
      if ($seo_text->section == Lot::$types[$section]) {
        if ($real_estate_type && $seo_text->real_estate_type) {
          if (mb_stristr($real_estate_type, $seo_text->real_estate_type)) {
            return $seo_text->text;
          }
        }
        else {
          return $seo_text->text;
        }
      }
    }
    return false;
  }

  public function getFullNamePrepositional() {
    $socr = '';
    $name = WordInflector::get(
      $this->name,
      WordInflector::TYPE_PREPOSITIONAL
    );

    switch ($this->socr) {
      case 'р-н':
        $socr = ' районе';
        break;
    }

    if (null == $name) {
      return $this->full_name;
    }

    return $name . $socr;
  }

  public function getIsMetro() {
    return in_array($this->region_id, array(77,78)) && preg_match('#^м\.?$#', $this->socr);
  }
}