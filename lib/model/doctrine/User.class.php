<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class User extends BaseUser
{
  public static
    $types = array(
      'company'   => 'Компания',
      'employee'  => 'Сотрудник компании',
      'realtor'   => 'Частный риэлтор',
      'owner'     => 'Собственник',
      'source'    => 'Источник',
    ),
    $inner_users = array(
      2, 3, 4, 5, 12, 6409, 10295, 10296, 10297, 23639
    ),
    $rated_user_types = array(
      'company', 'employee', 'realtor'
    );
  protected
    $_lots = array(),
    $_parsers_email = 'novostroiki@mesto.ru';
  private
    $_favourite_lots   = false,
    $_previous_rating  = null,
    $_read_comment_ids = array();


  public function setPassword ($value)
  {
    if (!preg_match('/^[a-f0-9]{32}$/', $value)) {
      $value = md5($value);
    }

    $this->_set('password', $value);
  }

  public function setRating ($value) {
    if ($this->type != 'owner' && $this->type != 'source') {
      $this->_previous_rating = $this->rating;
      $this->_set('rating', $value);
    }
  }

  public function getCompanyLogo() {
    if ($this->type == 'company') {
      return $this->photo;
    }
    elseif ($this->type == 'employee') {
      return $this->Employer->photo;
    }
    else {
      return null;
    }
  }


  public function getRating() {
    if ($this->getSettingsValue('show_rating')) {
      return $this->_get('rating');
    }
    else {
      return null;
    }
  }

  public function getPhotoPath($create = true)
  {
    return Toolkit::buildStoragePath('user', $this->id, true, $create);
  }

  public function getFullPhotoPath($create = true, $source = true) {
    return Toolkit::buildStoragePath('user', $this->id, false, $create, true);
  }

  public function getCompanyName () {
    if ($this->type == 'company') {
      return $this->_get('company_name');
    }
    elseif ($this->type == 'employee') {
      return $this->Employer->company_name;
    }
    else {
      return null;
    }
  }

  public function getRegionsArray()
  {
    $regions = array();
    foreach ($this->Regions as $region) {
      $regions[] = $region->region_id;
    }
    return $regions;
  }

  public function getFirstName()
  {
    $name = explode(' ', $this->name, 2);
    return $name[0];
  }

  public function getLastName()
  {
    $name = explode(' ', $this->name, 2);
    return $name[1];
  }

  public function getTypeText()
  {
    return self::$types[$this->type];
  }

  public function getIsInner()
  {
    return $this->type == 'source';
  }

  public function getIsPartner()
  {
    return UserGroup::PARTNERS_ID == $this->group_id;
  }

  public function getIsNbParser()
  {
    return $this->_parsers_email == $this->email;
  }

  public function getLotsUserId() {
    $ids = array($this->id);

    if ($this->type == 'company') {
      foreach ($this->Employees as $employee) {
        $ids[] = $employee->id;
      }
    }

    return $ids;
  }

  public function getSettingsArray() {
    $settings = UserSettings::$defaults;

    foreach ($settings as $name => $default) {
      $settings[$name] = $this->getSettingsValue($name, $default);
    }

    return $settings;
  }

  public function getSettingsNamed() {
    $settings = UserSettings::$defaults;

    foreach ($this->Settings as $setting) {
      $settings[$setting->name] = $setting;
    }

    foreach ($settings as $name => $setting) {
      if (!($setting instanceOf UserSettings)) {
        $settings[$name] = new UserSettings();
        $settings[$name]->fromArray(array(
          'name'  => $name,
          'value' => UserSettings::$defaults[$name],
        ));
      }
    }

    return $settings;
  }

  public function getSettingsValue($name, $default = true) {
    foreach ($this->Settings as $settings) {
      if ($name == $settings->name) {
        return $settings->value;
      }
    }

    if (null === $default && isset(UserSettings::$defaults[$name])) {
      return UserSettings::$defaults[$name];
    }
    else {
      return $default;
    }
  }

  public function setSettingsValue($name, $value) {
    if (!isset(UserSettings::$defaults[$name])) {
      throw new Exception(sprintf('Setting named %s isn\'t defined!', $name));
    }

    foreach ($this->Settings as $settings) {
      if ($name == $settings->name) {
        $settings->value = $value;
        $settings->save();
        return true;
      }
    }

    $settings = new UserSettings();
    $settings->fromArray(array(
      'name'    => $name,
      'value'   => $value,
      'user_id' => $this->id,
    ));
    $settings->save();

    return true;
  }

  public function setRegion($region_id = null) {
    if (null == $region_id) {
      return false;
    }

    if ($this->type == 'employee') {
      $this->Employer->setRegion($region_id);
    }
    $conn = Doctrine::getConnectionByTableName('user_region');
    $stmt = $conn->prepare(
      'INSERT INTO user_region (user_id, region_id, lots_count)
      VALUES (?, ?, ?)
      ON DUPLICATE KEY UPDATE lots_count=lots_count+1');

    return $stmt->execute(array($this->id, $region_id, 1));
  }

  public function deleteRegion ($region_id = null) {
    if (null == $region_id) {
      return false;
    }

    foreach ($this->Regions as $region) {
      if ($region->region_id == $region_id) {
        if ($region->lots_count > 1) {
          $region->lots_count--;
          $region->save();
          break;
        }
        else {
          $region->delete();
          break;
        }
      }
    }

    if ($this->type == 'employee') {
      $this->Employer->deleteRegion($region_id);
    }
    return false;
  }

  public function save(Doctrine_Connection $conn = null) {
    if ($this->isNew() && !$this->created_at) {
      $is_new = true;
      $this->created_at = date('Y-m-d H:i:s');
    }

    if ($this->employer_id && $this->type != 'employee') {
      $this->type = 'employee';
    }
    elseif (!$this->employer_id && $this->type == 'employee') {
      $this->type = 'realtor';
    }
    if ($this->_get('company_name') && $this->type != 'company') {
      $this->company_name = null;
      if ($this->employer_id) {
        $this->type = 'employee';
      }
    }

    parent::save($conn);

    if (!empty($is_new)) {
      //save default settings for user
      foreach (UserSettings::$defaults as $name => $default) {
        if ($this->type == 'company' && $name == 'show_rating') {
          $this->setSettingsValue($name, NULL);
        }
        else {
          $this->setSettingsValue($name, $default ? 1 : 0);
        }
      }
    }
  }

  public function delete(Doctrine_Connection $conn = null) {
    Doctrine::getTable('Favourite')->createQuery()
      ->delete()
      ->where('user_id = ?', $this->id)
      ->execute();

    Doctrine_Query::create()
      ->update('Lot')
      ->set('status', '?', 'inactive')
      ->where('user_id = ?', $this->id)
      ->andWhere('status = ?', 'active')
      ->execute();

    if ($this->type == 'company'){
      $unset_employers = Doctrine_Query::create()
        ->update('User')
        ->set('type', '?', 'realtor')
        ->set('employer_id', 'null')
        ->set('company_name', 'null')
        ->where('employer_id = ?', $this->id)
        ->execute();
    }

    return parent::delete($conn);
  }

  public function inactive() {
    sfGearmanProxy::doBackground('deactivate_user', $this->id);
    return true;
  }

  public function isLotFavourite(Lot $lot) {
    if (!is_array($this->_favourite_lots)) {
      $this->_favourite_lots = array();
      $q = Doctrine::getTable('Favourite')->createQuery()
           ->select('lot_id')->andWhere('user_id = ?', $this->id);
      foreach ($q->fetchArray() as $row) {
        $this->_favourite_lots[] = $row['lot_id'];
      }
    }

    return count($this->_favourite_lots) && in_array($lot->id, $this->_favourite_lots);
  }

  public function toggleLotFavourite(Lot $lot) {
    if ($this->isLotFavourite($lot)) {
       Doctrine::getTable('Favourite')->createQuery()
           ->andWhere('lot_id = ?', $lot->id)->andWhere('user_id = ?', $this->id)
           ->delete()->execute();
       unset($this->_favourite_lots[array_search($lot->id, $this->_favourite_lots)]);
    }
    else {
      $favourite = new Favourite();
      $favourite->lot_id = $lot->id;
      $favourite->user_id = $this->id;
      $favourite->save();
      $this->_favourite_lots[] = $lot->id;
    }
  }

  public function isCommentUnRead(Post $post, PostComment $comment) {
    if ($comment->User->id == sfContext::getInstance()->getUser()->id) {
      return false;
    }

    if (!isset($this->_read_comment_ids[$post->id])) {
      $this->_read_comment_ids[$post->id] = array();
      $q = Doctrine::getTable('ReadPostComment')->createQuery()
          ->select('post_comment_id')
          ->andWhere('post_id = ?', $post->id)
          ->andWhere('user_id = ?', $this->id);
      foreach ($q->fetchArray() as $row) {
        $this->_read_comment_ids[$post->id][] = $row['post_comment_id'];
      }
    }

    return !in_array($comment->id, $this->_read_comment_ids[$post->id]);
  }

  public function rerateRating ()
  {
    sfGearmanProxy::doBackground('rerate_user_profile', $this->id);
  }

  public function deletePhoto()
  {
    if ($this->photo){
      $this->photo = null;
      $this->save();
      return true;
    }
    return false;
  }

  public function isLotClaimed($id = 0)
  {
    if(!$id) return false;
    $q = Doctrine::getTable('Claim')->createQuery()
          ->andWhere('lot_id = ?', $id)
          ->andWhere('user_id = ?', $this->id)
          ->limit(1);

    if(count($q)) return $q->fetchOne();
    else return false;
  }

  public function getLotsCountsByStatus()
  {
    $query = Doctrine::getTable('Lot')->createQuery()
        ->select('status, count(id) nb')
        ->where('user_id = ?', $this->id)
        ->orderBy('status asc')
        ->groupBy('status');

    $count = array();
    foreach ($query->fetchArray() as $row) {
      $count[$row['status']] = $row['nb'];
    }

    return $count;
  }
}
