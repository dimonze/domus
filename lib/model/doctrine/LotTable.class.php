<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class LotTable extends Doctrine_Table
{
  public function createQuery($alias = '') {
    $q = parent::createQuery($alias);

    if (!empty($alias))
    {
      $relation = "$alias.User";
    }
    else
    {
      $relation = 'Lot.User';
    }

    return $q->leftJoin($relation)->orderBy('active_till desc');
  }

  public function createQuerySlave($alias = '')
  {
    $conn = ProjectConfiguration::getActive()->getSlaveConnection();
    if (!empty($alias)) {
      $alias = ' ' . trim($alias);
      $relation = "$alias.User u";
    }
    else {
      $relation = 'Lot.User';
    }

    $q = Doctrine_Query::create($conn)->from($this->getComponentName() . $alias);
    $this->_conn = ProjectConfiguration::getActive()->getMasterConnection();
    return $q->leftJoin($relation)->orderBy('active_till desc');
  }

  public function createQueryStatistic($alias = 'l', $filters = array())
  {
    $query = parent::createQuery($alias)
      ->leftJoin($alias . '.User u')
      ->select('DATE_FORMAT(' . $alias . '.active_till, "%Y-%m-%d") as stat_at, count(' . $alias . '.id) as deleted, l.id');

    $user_filters = array();
    if (count($filters) > 0) {
      foreach ($filters as $name => $value) {
        switch ($name) {
          case 'type':
            $query->andWhere($alias . '.type = ?', $value);
            break;
          case 'region':
            $query->andWhere($alias . '.region_id = ?', $value);
            break;
          case 'date_from':
            $date = date('Y-m-d', strtotime($value));
            if ($filters['date_from'] == $filters['date_to']) {
              $query->andWhere($alias . '.active_till like ?', $date . '%');
            }
            else {
              $query->andWhere($alias . '.active_till >= ?', array($date));
            }
            break;
          case 'date_to':
            $date = date('Y-m-d', strtotime($value));
            if ($filters['date_from'] == $filters['date_to']) {
              $query->andWhere($alias . '.active_till like ?', $date . '%');
            }
            else {
              $query->andWhere($alias . '.active_till <= ?', array($date));
            }
            break;
          case 'usertype1':
            $user_filters[] = 'company';
            break;
          case 'usertype2':
            $user_filters[] = 'employee';
            break;
          case 'usertype3':
            $user_filters[] = 'realtor';
            break;
          case 'usertype4':
            $user_filters[] = 'owner';
            break;
          case 'usertype5':
            $user_filters[] = 'source';
            break;
         }
      }
      if (count($user_filters) > 0) {
        $query->andWhereIn('u.type', $user_filters);
      }
    }
    return $query->groupBy('stat_at')
      ->orderBy('stat_at');
  }

  public function createQuerySlaveActive($alias = '')
  {
    return $this->createQuerySlave($alias)->andWhere('status = ?', 'active');
  }

  public function createQueryActive($alias = '') {
    return $this->createQuery($alias)->andWhere('status = ?', 'active');
  }

  public function createQueryActiveList($alias = '') {
    return $this->createQueryActive($alias)
        ->leftJoin('Lot.Region')
        ->leftJoin('Lot.LotInfo li')
        ->leftJoin('li.FormField');
  }

  public function getOne(array $params) {
    $q = $this->createQuery()
      ->leftJoin('Lot.User')
      ->leftJoin('Lot.LotInfo li')
      ->leftJoin('li.FormField')
      ->andWhereIn('status', array('active', 'inactive'))
      ->andWhereIn('Lot.User.deleted_at IS NULL');

    if (isset ($params['id'])) {
      $q->andWhere('id = ?', $params['id']);
    }
    if (isset ($params['type'])) {
      $q->andWhere('type = ?', $params['type']);
    }

    return $q->fetchOne();
  }

  public function getRestrictedToUser($pk, Doctrine_Query $query = null) {
    if (!$query) {
      $query = Doctrine::getTable('Lot')->createQuery();
    }
    if (!sfContext::getInstance()->getUser()->hasCredential('moder-access')) {
      $query->andWhere('user_id = ?', sfContext::getInstance()->getUser()->id);
    }
    $query->andWhere('Lot.deleted_at IS NULL');
    if (is_array($pk)) {
      return $query->andWhereIn('id', $pk)->execute();
    }
    else {
      return $query->andWhere('id = ?', $pk)->fetchOne();
    }
  }

  public function fetch(array $pk = null) {
    if (count($pk)) {
      $collection = $this->createQuery()->andWhereIn('id', $pk)->execute();

      $data = array();
      foreach ($collection->getData() as $object) {
        $data[array_search($object->id, $pk)] = $object;
      }
      ksort($data);
      $collection->setData($data);

      return $collection;
    }
    else {
      return new Doctrine_Collection($this);
    }
  }

  public function filterResults(Doctrine_Collection $results)
  {
    foreach ($results as $i => $result)
    {
      if (!$result->active)
      {
        unset($results[$i]);
      }
    }
    return $results;
  }
}
