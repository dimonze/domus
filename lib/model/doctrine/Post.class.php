<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Post extends BasePost
{
  public static
    $types = array(
      'news'            => 'Новости',
      'article'         => 'Статьи',
      'analytics'       => 'Аналитика',
      'events'          => 'События рынка недвижимости',
      'expert_article'  => 'Экспертные мнения',
      'author_article'  => 'Авторские колонки',
      'qa'              => 'Вопросы и ответы',
      'questionnaire'   => 'Опросы'
    ),
    $seo_types = array(
      'news'            => 'Новости недвижимости',
      'article'         => 'Статьи о недвижимости',
      'analytics'       => 'Аналитика рынка недвижимости',
      'events'          => 'События рынка недвижимости',
      'expert_article'  => 'Экспертные мнения',
      'author_article'  => 'Авторские колонки специалистов недвижимости',
      'qa'              => 'Вопросы и ответы',
      'questionnaire'   => 'Опросы'
    ),
    $seo_types_nb = array(
      'news'            => 'Новости новостроек',
      'article'         => 'Статьи о новостройках',
      'analytics'       => 'Аналитика рынка новостроек',
      'events'          => 'События рынка новостроек',
      'expert_article'  => 'Экспертные мнения',
      'author_article'  => 'Авторские колонки специалистов недвижимости',
      'qa'              => 'Вопросы и ответы',
      'questionnaire'   => 'Опросы'
    ),
    $sections = array(
      'news-market' => 'Новости рынка',
      'news-portal' => 'Новости портала',
      'news-companies'  => 'Новости компаний'
    ),
    $status = array(
      'publish'     => 'Опубликовано',
      'not_publish' => 'Неопубликовано',
      'moderate'    => 'Ожидает модерации'
    );

  public static function getOtherPostTypes ($type)
  {
    if (!array_key_exists($type, self::$types)){
      throw new Exception('Unwkown Post type');
    }
    $types = array(
      'news'  => self::$types['news'],
      $type   => self::$types[$type]
    );
    $other_posts = array_diff(self::$types, $types);
    $post_types = array();
    foreach ($other_posts as $type => $name){
      $post_types[] = $type;
    }
    return $post_types;
  }

  public function getFullPhotoPath($create = true, $source = true)
    {
    return Toolkit::buildStoragePath($this->post_type, $this->id, false, $create, true);
  }

  public function getPhotoPath($create = true)
  {
    return Toolkit::buildStoragePath($this->post_type, $this->id, true, $create);
  }

  public function getTagsString()
  {
    $tags = array();
    foreach ($this->Tags as $tag) {
      $tags[] = $tag->title;
    }
    return join(', ', $tags);
  }

  public function getThemesArray()
  {
    $themes = array();
    foreach ($this->Themes as $theme){
      $themes[$theme->id] = $theme->title;
    }
    return $themes;
  }

  public function getStatusText()
  {
    return self::$status[$this->status];
  }

  public function setTitlePhoto($value) {
    if (is_array($value)) {
      $value = implode(',', $value);
    }
    return $this->_set('title_photo', strip_tags($value));
  }

  public function setTagsFromString($value)
  {
    $value = mb_strtolower($value, 'utf-8');
    $new_tags = preg_split('/\\s*,\\s*/', $value, null, PREG_SPLIT_NO_EMPTY);
    $new_tags = array_unique(array_filter(array_map('trim', $new_tags)));

    $this->unlink('Tags');

    if (!$new_tags) {
      return;
    }
    $tags = Doctrine::getTable('Tag')->createQuery()->andWhereIn('title', $new_tags)->execute();
    foreach ($tags as $tag) {
      $this->link('Tags', $tag->id);
      unset($new_tags[array_search($tag->title, $new_tags)]);
    }
    foreach ($new_tags as $title) {
      $tag = new Tag();
      $tag->title = $title;
      $tag->save();
      $this->link('Tags', $tag->id);
    }
  }
  /**
   * set themes id's in post_theme
   * @param array $value
   * @return null
   */
  public function setThemesFromArray($value)
  {
    $new_themes = $value;
    $this->unlink('Themes');

    if (!$new_themes) {
      return;
    }
    $themes = Doctrine::getTable('Theme')->createQuery()->andWhereIn('id', $new_themes)->execute();
    foreach ($themes as $theme) {
      $this->link('Themes', $theme->id);
      unset($new_themes[array_search($theme->title, $new_themes)]);
    }
  }

  public function getComments()
  {
    return Doctrine::getTable('PostComment')->createQuery()
        ->leftJoin('PostComment.User')
        ->andwhere('post_id = ?', $this->id)
        ->andwhere('level > ?', 0)
        ->orderBy('lft')
        ->execute();
  }

  public function save(Doctrine_Connection $conn = null)
  {
    $slug = $this->getSlug();
    if(empty($slug) && !in_array($this->post_type, array('events','qa', 'questionnaire')))
      $this->setSlug( self::generateSlug($this->getTitle()) );

    $need_init = $this->isNew();
    parent::save($conn);

    if ($need_init) {
      $this->initComments();
    }
  }
  
  public static function generateSlug($from)
  {
    return Toolkit::slugify(substr($from, 0, 255));
  }

  public function initComments()
  {
    $comment = new PostComment();
    $comment->fromArray(array(
        'user_id' => 1,
        'body'    => '',
        'post_id' => $this->id
      ));
    $comment->save();

    $treeObject = Doctrine::getTable('PostComment')->getTree();
    $treeObject->createRoot($comment);
  }

  public function getQaForDayTableProxy($date = null)
  {
    return $this->getTable()->createQueryActive('p')
      ->leftJoin('p.PostRegion r')
      ->andWhere('p.post_type = ?', 'qa')
      ->andWhere('p.created_at like ?', $date . '%')
      ->andWhere('r.region_id = ?', sfContext::getInstance()->getUser()->current_region->id)
      ->execute();
  }

  public function countQuestionaireVotes() {
    $count = 0;
    foreach($this->Answers as $answer) $count += $answer->vote;
    return $count;
  }

  public function getCanonicalUrl()
  {
    $defaults = array(77, 50, 78, 47);
    $id = $this->MainRegion->id;
    if(null === $id) {
      if(1 == count($this->Region)) {
        $id = $this->Region->id;
      }
      else {
        $regions = array();
        foreach($this->Region as $region) {
          $regions[] = $region->id;
        }

        foreach($defaults as $default) {
          if(in_array($default, $regions)) {
            $id = $default;
            break;
          }
        }
      }
    }

    if(null === $id) {
      $id = 77;
    }

    if($id != Toolkit::getRegionId()) {
      return Toolkit::getGeoHostByRegionId($id) . sfContext::getInstance()->getRequest()->getPathInfo();
    }
    return false;
  }
}
