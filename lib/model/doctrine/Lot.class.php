<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Lot extends BaseLot
{
  const
    TYPE_APARTAMENT_SALE  = 1,
    TYPE_APARTAMENT_RENT  = 2,
    TYPE_HOUSE_SALE       = 3,
    TYPE_HOUSE_RENT       = 4,
    TYPE_COMMERCIAL_SALE  = 5,
    TYPE_COMMERCIAL_RENT  = 6,
    TYPE_NEW_BUILDING_SALE = 7,
    TYPE_COTTAGE_SALE     = 8,
    CURRENCY_TYPE_DAY     = 'day',
    CURRENCY_TYPE_MONTH   = 'month',
    CURRENCY_TYPE_YEAR    = 'year',

    STATUS_ACTIVE         = 1,
    STATUS_INACTIVE       = 2,
    STATUS_RESTRICTED     = 3,
    STATUS_MODERATE       = 4,
    STATUS_NOT_PAID       = 5;

  static public
    $_similar_fields = array(
      'apartament-sale'   => array(1),      'apartament-rent' => array(1),
      'house-sale'        => array(26, 27), 'house-rent'      => array(26, 27),
      'commercial-sale'   => array(46, 47), 'commercial-rent' => array(46, 47),
      'new_building-sale' => array(70,71,72,73), 
      'cottage-sale' => array(94,95,96,97,98,99,100,101,102,103,104,105)
    ),
    $_base_fields = array(
      'apartament-sale'   => array(54),     'apartament-rent' => array(55),
      'house-sale'        => array(26, 27, 64), 'house-rent'      => array(26, 27),
      'commercial-sale'   => array(46, 47), 'commercial-rent' => array(46, 47),
      'new_building-sale' => array(), 'cottage-sale' => array()
    ),
    $statuses = array(
      'active'      =>  self::STATUS_ACTIVE,
      'inactive'    =>  self::STATUS_INACTIVE,
      'restricted'  =>  self::STATUS_RESTRICTED,
      'moderate'    =>  self::STATUS_MODERATE,
      'not-paid'    =>  self::STATUS_NOT_PAID,
    ),
    $statuses_plural = array(
      'active'     => 'Активны',
      'inactive'   => 'Неактивны',
      'moderate'   => 'Ожидают модерации',
      'restricted' => 'Запрещены',
      'not-paid'   => 'Неоплачены',
    ),
    $directions = array(
      'kaluzhskoe', 'dmitrovskoe', 'kievskoe', 'mozhayskoe', 'schelkovskoe',
      'ryazanskoe', 'kashirskoe', 'yaroslavskoe'
    ),
    $direction_regionnodes = array(
      'kaluzhskoe'  =>  array('Ленинский р-н', 'Подольский р-н'),
      'dmitrovskoe' =>  array('Мытищинский р-н', 'Дмитровский р-н'),
      'kievskoe'    =>  array('Ленинский р-н', 'Наро-Фоминский р-н'),
      'mozhayskoe'  =>  array('Одинцовский р-н'),
      'schelkovskoe'  =>  array('Щелковский р-н'),
      'ryazanskoe'    =>  array('Люберецкий р-н', 'Раменский р-н', 'Коломенский р-н'),
      'kashirskoe'    =>  array('Ленинский р-н', 'Домодедовский р-н', 'Ступинский р-н'),
      'yaroslavskoe'  =>  array('Щелковский р-н', 'Пушкинский р-н', 'Сергиево-Посадский р-н')
    ),
    $type_ru = array(
      'apartament-sale'   => 'продажа квартир',
      'apartament-rent'   => 'аренда квартир',
      'house-sale'        => 'продажа домов',
      'house-rent'        => 'аренда домов',
      'commercial-sale'   => 'продажа комерческой недв.',
      'commercial-rent'   => 'аренда комерческой недв.',
      'new_building-sale' => 'продажа новостроек',
      'cottage-sale'      => 'продажа коттеджных поселков',
    ),
    $types = array(
      'apartament-sale'   =>  self::TYPE_APARTAMENT_SALE,
      'apartament-rent'   =>  self::TYPE_APARTAMENT_RENT,
      'house-sale'        =>  self::TYPE_HOUSE_SALE,
      'house-rent'        =>  self::TYPE_HOUSE_RENT,
      'commercial-sale'   =>  self::TYPE_COMMERCIAL_SALE,
      'commercial-rent'   =>  self::TYPE_COMMERCIAL_RENT,
      'new_building-sale' =>  self::TYPE_NEW_BUILDING_SALE,
      'cottage-sale'      =>  self::TYPE_COTTAGE_SALE,
    ),
    $categories = array(
      'квартира'                  =>  'apartament',
      'комната'                   =>  'apartament',
      'дом'                       =>  'house',
      'участок'                   =>  'house',
      'коммерческая недвижимость' =>  'commercial'
    ),
    $type = array(
      'продажа' =>  'sale',
      'аренда'  =>  'rent'
    ),
    $currency_types = array(
      'apartament-rent' =>  array(
        self::CURRENCY_TYPE_DAY =>  'сутки',
        self::CURRENCY_TYPE_MONTH =>  'месяц'
      ),
      'commercial-rent' =>  array(
        self::CURRENCY_TYPE_MONTH =>  'месяц',
        self::CURRENCY_TYPE_YEAR =>  'год'
      ),
    ),
    $currency_default_type = array(
      'apartament-rent' =>  self::CURRENCY_TYPE_MONTH,
      'commercial-rent' =>  self::CURRENCY_TYPE_YEAR
    ),
    $_base_fields_for_landing = array(
      'apartament-sale'   => 54,     'apartament-rent' => 55,
    ),
    $_routing_types = array(
      'prodazha-kvartir-i-komnat'           => 'apartament-sale',
      'arenda-kvartir-i-komnat'             => 'apartament-rent',
      'prodazha-domov-i-uchastkov'          =>  'house-sale',
      'arenda-domov'                        =>  'house-rent',
      'prodazha-komercheskoy-nedvizhimosti' =>  'commercial-sale',
      'arenda-komercheskoy-nedvizhimosti'   =>  'commercial-rent',
      'novostroyki-v-moskve'                =>  'new_building-sale',
      'novostroyki-v-podmoskovie'           =>  'new_building-sale',
      'cottage-v-podmoskovie'               =>  'cottage-sale',
    ),
    $_subdomains = array(
      'new_building-sale', 'cottage-sale'
    ),
    $virtual_fields = array(
        'cottage-sale' => array(
            'price' => array(
                'depends_on' => 107,
                'Участок' => array( 'from' => 96, 'to' => 97 ),
                'Дом/Коттедж' => array( 'from' => 100, 'to' => 101 ),
                'Таунхаусы и Дуплексы' => array( 'from' => 104, 'to' => 105 ),
                'Участок с подрядом' => 'Участок'
            ),
            'square' => array(
                'depends_on' => 107,
                'Дом/Коттедж' => array( 'from' => 98, 'to' => 99 ),
                'Таунхаусы и Дуплексы' => array( 'from' => 102, 'to' => 103 ),
            )
        )
    );

  public function activate() {
    if (in_array($this->status, array('inactive', 'restricted', 'moderate')) || $this->deleted_at != null){
      $this->User->active_count++;
      if ($this->User->deleted_count > 0) {
        $this->User->deleted_count--;
      }
      $this->User->save();
    }
    $period = sfConfig::get('app_lot_periods');
    $type = explode('-', $this->type);
    $periods = array_keys($period[$type[1]]);

    $update_period = $periods[0];
    if (null != $this->updated_at) {
      $update_period = (strtotime($this->active_till) - strtotime($this->updated_at)) / (60 * 60 * 24);
      if ($update_period <= $periods[0]) {
        $update_period = $periods[0];
      }
      else if ($update_period > $periods[0] && $update_period <= $periods[1]) {
        $update_period = $periods[1];
      }
      else if ($update_period > $periods[1]) {
        $update_period = $periods[2];
      }
    }
    $this->active_till = date('Y-m-d H:i:s', strtotime(sprintf('+%d days', $update_period)));
    $this->status = 'active';
    return $this;
  }

  public function deactivate() {
    if ($this->status == 'active') {
      if ($this->User->active_count > 0) {
        $this->User->active_count--;
      }
      $this->User->deleted_count++;
      $this->User->save();
    }

    $this->active_till = date('Y-m-d H:i:s');
    $this->status = 'inactive';
    if ($this->imported == 1) {
      $this->delete();
    }
    return $this;
  }

  public function restrict($pm_id = null)
  {
    if ('restricted' == $this->status) {
      return false;
    }
    elseif ('active' == $this->status) {
      if ($this->User->active_count > 0) {
        $this->User->active_count--;
      }
      $this->User->deleted_count++;
      $this->User->save();
    }

    $this->status = 'restricted';
    if ($pm_id) {
      $this->moderator_message = $pm_id;
    }

    return $this;
  }

  public function delete(Doctrine_Connection $conn = null) {
    if ($this->status == 'active') {
      if ($this->User->active_count > 0) {
        $this->User->active_count--;
      }
      $this->User->deleted_count++;
      $this->User->save();
    }

    $this->status = 'inactive';
    
    return parent::delete();
  }

  public function save(Doctrine_Connection $conn = null, $not_paid = false, $generate_slug = true) {

    $is_new = $this->isNew();

    if(true === $not_paid) {
      $this->status = 'not-paid';
    }

    $modified = $this->getModified();

    if (empty($modified) || !empty($modified['deleted_at'])) {
      parent::save($conn);
      if($generate_slug) $this->setSlug($this->generateSlug());
      $this->synonimizeActive();
      return;
    }

    $this->updated_at = date('Y-m-d H:i:s');

    if(empty($this->rating)) $this->rating = Rating::calculate($this);
    
    $need_check = false;
    $fields = array('description', 'address1', 'address2');

    foreach ($fields as $field) {
      if (isset($modified[$field])) {
        $need_check = true;
        break;
      }
    }

    if (!$this->isNew() && (isset($modified['price']) || isset($modified['currency']))) {
      Logger::prepareLog($this);
      parent::save($conn);
      Logger::log($this, array('price' => 'price_exchanged'));
    }
    else {
      parent::save($conn);

      if ($this->status == 'active' && $is_new === true) {
        $this->setRelUserToRegion();
      }

      if ($this->status == 'restricted' && null == $this->moderator_message){
        $default_email_theme = sfYaml::load(sfConfig::get('sf_config_dir') . '/default_email_themes.yml');
        $email_themes = sfYaml::load(sfConfig::get('sf_config_dir') . '/email_themes.yml');

        $data['receiver'] = $this->User->email;
        $data['subject']  = $default_email_theme['all']['restrict_message'];
        $data['message']  = $email_themes[$default_email_theme['all']['restrict_message']]['body'];
        $data['lot_id']   = $this->id;
        $data['priority'] = 'high';
        $data['message'] = preg_replace('/{имя фамилия}/', $this->User->name, $data['message']);

        if (!empty($this->id)) {
          $url = sfContext::getInstance()->getRouting()->generate(
            'lot_action', array('action' => 'edit', 'id' => $this->id), true
          );
          $data['message'] = preg_replace(
            '/{адрес объявления}/',
            '<a href="' . $url . '" target="_blank" class="address_full">' .
            $this->address_full . '</a>',
            $data['message']
          );
        }

        $pm = new PMModeratorForm();
        $pm->bind($data);
        if ($pm->isValid()){
          $pm_id = $pm->save();
          $this->moderator_message = $pm_id;
          //$pm->send_user_message($this->User);
        }
      }
    }

    // TODO fix this!
    // if ($this->status == 'active') {
    //   $this->setRegionMenu(true);
    // }
    // TODO change this
    // else {
    //    $lots = Doctrine::getTable('Lot')
    //     ->createQueryActive('p')
    //     ->andWhere('p.region_id = ?', $this->region_id)
    //     ->limit(1)
    //     ->execute();
    //   if (count($lots) == 0) {
    //     $this->setRegionMenu(false);
    //   }
    // }

    if ($need_check || $is_new) {
      $config = sfYaml::load(sfConfig::get('sf_apps_dir') . '/../config/stopwords.yml');
      foreach ($config['all'] as $word) {
        foreach ($fields as $field) {
          //use mb_stripos, stripos not work correctly with cyrillic UTF-8
          if (mb_stripos($this->$field, ' ' . $word . ' ', 0, 'UTF-8') !== false) {
            $this->status = $not_paid ? 'not-paid' : 'restricted';
            break;
          }
        }
      }
    }

    $this->synonimizeActive();
    if($generate_slug) $this->setSlug($this->generateSlug());
    parent::save($conn);
  }

  private function synonimizeActive()
  {
    if ('active' == $this->status) {
      sfGearmanProxy::doBackground('synonymize_description', $this->id);
    }
  }

  protected function generateSlug()
  {
    if(preg_match('#-manual$#', $this->slug)) { //#17133
      $slug = preg_replace('#-manual$#', '', $this->slug);
      $slug .= "-{$this->id}";
      return $slug;
    }
    
    $slug = array();
    $address = explode(',', $this->address1);
    //remove region from address for slug
    array_shift($address);
    foreach($address as $part) {
      $part = Regionnode::unformatName($part);
      $slug[] = $part[0];
    }
    if($block = $this->getLotInfoField(91)) {
      $slug = Toolkit::slugify(sprintf('%s %s %s %d',$block, implode(' ', $slug), $this->address2, $this->id));
      $slug = preg_replace('#zhk-#','', $slug); //No "zhk" doubles
      return "zhk-$slug";
    }
    if($this->type == 'cottage-sale') {
      $block = $this->getPrepearedLotInfoField(106);
      $slug = Toolkit::slugify(sprintf('%s %s %s %d', (empty($block) ? '' : $block), implode(' ', $slug), $this->address2, $this->id));
      $slug = preg_replace('#kottedzhnyy-poselok-#','', $slug); //No "kottedzhnyy-poselok" doubles
      return "kottedzhnyy-poselok-$slug";
    }
    return Toolkit::slugify(sprintf('%s %s %d', implode(' ', $slug), $this->address2, $this->id));
  }

  protected function setStriped($field, $value) {
    return $this->_set($field, strip_tags($value));
  }

  public function setDescription($value) {
    $this->setStriped('description', $value);
  }
  public function setOrganizationLink($value) {
    $this->setStriped('organization_link', $value);
  }
  public function setOrganizationName($value) {
    $this->setStriped('organization_name', $value);
  }
  public function setAddress1($value) {
    $this->setStriped('address1', $value);
  }
  public function setAddress2($value) {
    $this->setStriped('address2', $value);
  }

  public function setCurrency($value) {
    return $this->_set('currency', $value) && $this->_set('exchange', Currency::convert(1, $value, 'RUR'));
  }

  protected function setRegionMenu($value)
  {
    $this->Region->in_menu = $value;
    return $this->Region->save();
  }

  public function setRelUserToRegion() {
    $this->User->setRegion($this->region_id);
  }

  public function getPriceExchanged($currency = 'RUR') {
    return ceil(Currency::convert($this->_get('price'), $this->_get('currency'), $currency));
  }
  public function getPriceFormated($currency = 'RUR', $currency_type = false) {
    if($this->type == 'cottage-sale'){
      $v = '';
      $min_price = $max_price = 0;
      
      foreach (array(100,104,96) as $f) {
        $min_price = $this->getLotInfoField($f);
        $max_price = $this->getLotInfoField($f+1);
        if(!empty($min_price) || !empty($max_price)) break;
      }
      
      preg_match('/([A-Z]{3})?(\d+[\.,\d]*)/' , $min_price, $min);
      preg_match('/([A-Z]{3})?(\d+[\.,\d]*)/' , $max_price, $max);
      
      $min_price = trim(array_pop($min));
      $max_price = trim(array_pop($max));
      
      $min_currency = trim(array_pop($min));
      if(empty($min_currency)) $min_currency = $currency;
      $max_currency = trim(array_pop($max));
      if(empty($max_currency)) $max_currency = $currency;
      
      if( !empty($min_price) ){
        $min_price = Currency::formatPrice($min_price, $min_currency, $currency);
        $v = 'от ' . $min_price;
      }
      
      if( !empty($max_price) && $max_price != $min_price ){
        $max_price = Currency::formatPrice($max_price, $max_currency, $currency);
        if(!empty($v))
          $v = mb_substr($v, 2) . ' - ' . $max_price;
        else
          $v = ' до ' .$max_price;
      }
      
      return $v;
    }elseif ($this->type == 'new_building-sale') {
      $v = '';
      
      preg_match('/([A-Z]{3})?(\d+[\.,\d]*)/' , $this->getLotInfoField(70), $min);
      preg_match('/([A-Z]{3})?(\d+[\.,\d]*)/' , $this->getLotInfoField(71), $max);

      $min_price = trim(array_pop($min));
      $max_price = trim(array_pop($max));
      
      $min_currency = trim(array_pop($min));
      if(empty($min_currency)) $min_currency = $currency;
      $max_currency = trim(array_pop($max));
      if(empty($max_currency)) $max_currency = $currency;
      
      if( !empty($min_price) ){
        $min_price = Currency::formatPrice($min_price, $min_currency, $currency);
        $v = 'от ' . $min_price;
      }
      
      if( !empty($max_price) && $max_price != $min_price ){
        $max_price = Currency::formatPrice($max_price, $max_currency, $currency);
        if(!empty($v))
          $v = mb_substr($v, 2) . ' - ' . $max_price;
        else
          $v = ' до ' .$max_price;
      }
      $v .= ' м<sup>2</sup>';
      return $v;
    } else {
      $lot_currency = '';
      if ($this->type == 'apartament-rent') $lot_currency = $this->getLotInfoField(68);
      if ($this->type == 'commercial-rent') $lot_currency = $this->getLotInfoField(69);
      if ($this->type == 'apartament-rent' || $this->type == 'commercial-rent') {
        $lot_currency = array_search($lot_currency, self::$currency_types[$this->type]);
      }

      if (!$currency_type || $currency_type == $lot_currency) {
        return Currency::formatPrice($this->_get('price'), $this->_get('currency'), $currency);
      }
      else {
        if ($currency_type) {
          if ($lot_currency == self::CURRENCY_TYPE_YEAR && $currency_type == self::CURRENCY_TYPE_MONTH) {
            return Currency::formatPrice($this->_get('price')/12, $this->_get('currency'), $currency);
          }
          else if ($lot_currency == self::CURRENCY_TYPE_MONTH && $currency_type == self::CURRENCY_TYPE_YEAR) {
            return Currency::formatPrice($this->_get('price')*12, $this->_get('currency'), $currency);
          }
          else if ($lot_currency == self::CURRENCY_TYPE_DAY && $currency_type == self::CURRENCY_TYPE_MONTH) {
            return Currency::formatPrice($this->_get('price')*30, $this->_get('currency'), $currency);
          }
          else if ($lot_currency == self::CURRENCY_TYPE_MONTH && $currency_type == self::CURRENCY_TYPE_DAY) {
            return Currency::formatPrice($this->_get('price')/30, $this->_get('currency'), $currency);
          }
        }
      }
    }

    return Currency::formatPrice($this->_get('price'), $this->_get('currency'), $currency);
  }

  public function getPriceHelp($currency_type = false) {
    switch ($this->type) {
      case 'house-rent':
        return 'в мес.';
      case 'apartament-rent':
      case 'commercial-rent':
        $currency = $this->getLotInfoField(69);
        $format = 'м<sup>2</sup>/%1$s'
            . '<small style="color: gray;"> для земли Га/%1$s'
            . '</small>';

        if($this->type == 'apartament-rent'){
          $currency = $this->getLotInfoField(68);
          $format = '%s';
        }

        if ($currency_type && array_key_exists($currency_type, self::$currency_types[$this->type])){
          $currency = self::$currency_types[$this->type][$currency_type];
        }

        return sprintf($format, $currency);
      case 'cottage-sale':
        foreach (array(100,104,96) as $f) {
          $min_price = $this->getLotInfoField($f);
          $max_price = $this->getLotInfoField($f+1);
          if(!empty($min_price) || !empty($max_price)) break;
        }
        
        switch($f){
          case 96:
          case 97:
            return 'Цена участка';
            break;
          case 100:
          case 101:
            return 'Цена дома';
            break;
          case 104:
          case 105:
            return 'Цена таунахуса';
            break;
        }
        break;
      default:
        return null;
    }
  }

  public function getActive() {
    return !$this->deleted_at && $this->status == 'active';
  }

  public function getOnModeration() {
    return !$this->deleted_at && $this->status == 'moderate';
  }

  public function getHumanStatus() {
    if ($this->status == 'active') {
      if ($this->User->company_name)  {
        return $this->User->company_name;
      } else {
        return $this->User->type_text;
      }
    } else {
      return $this->status_text;
    }
  }

  public function getStatusText() {
    switch ($this->status) {
      case 'active':
        return 'Активно';
      case 'inactive':
        return 'Неактивно';
      case 'moderate':
        return 'Ожидает модерации';
      case 'restricted':
        return 'Отклонено модератором';
      case 'not-paid':
        return 'Не оплачено';
      default:
        return null;
    }
  }

  public function getDate($format = null) {
    $time = strtotime($this->created_at);

    if ($time + 3600*24*15 < strtotime($this->active_till)) {
      $time = strtotime($this->active_till) - 3600*24*15;
    }
    if ($time > time()) {
      $time = time();
    }

    if ($format) {
      return date($format, $time);
    }
    else {
      return $time;
    }
  }

  public function getAge() {
    return ceil((time() - strtotime($this->created_at)) / 3600 / 24);
  }


  public function getBriefArray() {
    $brief = explode("\n" ,$this->_get('brief'));
    foreach ($brief as $i => $row) {
      $brief[$i] = explode(':', $row);
      if (isset($brief[$i][1])) {
        $brief[$i][0] .= ':';
      }
    }
    return $brief;
  }
  public function getBriefArrayFormated() {
    $formated = array();
    foreach ($this->briefArray as $i => $row) {
      $formated[] = '<strong>' . $row[0] . '</strong> ' . (isset($row[1]) ? $row[1] : '');
    }
    return $formated;
  }

  public function getLotInfoArrayNoGroups() {
    $info = array();
    $lot_info = array();
    $order = sfConfig::get('app_lot_info-order', array());
    $order = isset($order[$this->type]) ? $order[$this->type] : array();

    foreach ($this->_get('LotInfo') as $li) {
      if ($li->FormField->id != 53) {
        $lot_info[$li->FormField->id] = $li;
      }
    }

    foreach ($lot_info as $li) {
      if ($li->FormField->type == 'price') {
        if (preg_match('/^[A-Z]{3}\d+$/', $li->value)) {
          list($amount, $currency) = array(substr($li->value, 3), substr($li->value, 0, 3));
        }
        else {
          list($amount, $currency) = array($li->value, 'RUR');
        }

        $info[$li->FormField->id] = array(
          'name' => $li->FormField->label,
          'help' => Currency::formatPrice($amount, $currency, 'USD') . ' ' .
                    Currency::formatPrice($amount, $currency, 'EUR'),
          'value' => Currency::formatPrice($amount, $currency, 'RUR'),
        );
      }
      else {
        $info[$li->FormField->id] = array(
          'name' => $li->FormField->label,
          'help' => $li->FormField->help,
          'value' => $li->value
        );
      }
    }
    return $info;
  }

  public function getLotInfoArray() {
    $info = array();
    $o_info = array();
    $lot_info = array();
    $order = sfConfig::get('app_lot_info-order', array());
    $order = isset($order[$this->type]) ? $order[$this->type] : array();

    foreach ($this->_get('LotInfo') as $li) {
      if ($li->FormField->id != 53) {
        $lot_info[$li->FormField->id] = $li;
      }
    }

    foreach ($order as $group) {
      $row = array();
      foreach ($group as $field_id) {
        if (isset($lot_info[$field_id])) {
          $row[] = $lot_info[$field_id];
          unset($lot_info[$field_id]);
        }
      }
      if (count($row)) {
        $o_info[] = $row;
      }
    }

    if (count($lot_info)) {
      $o_info[] = $lot_info;
    }
    
    foreach ($o_info as $i => $group) {
      foreach ($group as $li) {
        if ($li->FormField->type == 'price') {
          if (preg_match('/^[A-Z]{3}\d+$/', $li->value)) {
            list($amount, $currency) = array(substr($li->value, 3), substr($li->value, 0, 3));
          }
          else {
            list($amount, $currency) = array($li->value, 'RUR');
          }
          
          if($this->type == 'cottage-sale') //Cottages special #17105
            $info[$i]['f'.$li->FormField->id] = array(
                'name' => $li->FormField->label,
                'help' => '',
                'value' => Currency::formatPrice($amount, $currency, 'RUR'),
                'id'   => $li->FormField->id,
            );
          else
            $info[$i][] = array(
              'name' => $li->FormField->label,
              'help' => Currency::formatPrice($amount, $currency, 'USD') . ' ' .
                        Currency::formatPrice($amount, $currency, 'EUR'),
              'value' => Currency::formatPrice($amount, $currency, 'RUR'),
            );
        }
        else {
          $info[$i][] = array(
            'name' => $li->FormField->label,
            'help' => $li->FormField->help,
            'value' => $li->value,
            'id'   => $li->FormField->id,
          );
        }
      }
    }
    
    //Cottages special #17105
    if($this->type == 'cottage-sale'){
      foreach (array(96,104,100) as $i) {
        if(!empty( $info[0]['f'.$i] ) || !empty( $info[0]['f'.($i+1)] )) {
          $v = !empty($info[0]['f'.$i]) ? $info[0]['f'.$i]['value'] : '';
          $v .= !empty( $info[0]['f'.($i+1)] ) ? (!empty($v) ? ' - ' : '') . $info[0]['f'.($i+1)]['value'] : '';
          $v = html_entity_decode($v, ENT_QUOTES, "UTF-8");
          $v = trim(preg_replace('#\s*руб\.#u', '', $v) );

          array_unshift($info[0], array(
            'name' => $i == 96 ? 'Цена участка' : ($i == 100 ? 'Цена дома' : 'Цена таунхауса'),
            'help' => 'руб.',
            'value' => $v,
            'id'   => $i
          ));

          unset( $info[0]['f'.$i], $info[0]['f'.($i+1)] );
        } 
      }
    }
    
    return $info;
  }

  public function getFullDescription()
  {
    return trim($this->description . "\n\n" . $this->auto_description);
  }

  public function getSeparatedAutoDescription()
  {
    $desc = preg_split('#(?<!кв\.|сот\.|Жил\.)(?<=\.)\s#', $this->auto_description);
    $result = array(
      'first'  => implode(' ', array_slice($desc, 0, 3)),
      'second' => implode(' ', array_slice($desc, 3)),
    );
    return $result;
  }

  public function getSimilar($limit = null) {
    $query = $this->getTable()
      ->createQuerySlaveActive()
      ->leftJoin('Lot.LotInfo')
      ->andWhere('region_id = ?', $this->region_id)
      ->andWhere('type = ?', $this->type)
      ->andWhere('id != ?', $this->id)
      ->andWhere('price * exchange between ? and ?',
          array($this->getPriceExchanged('RUR') * 0.9, $this->getPriceExchanged('RUR') * 1.1))
      ;

    $address = explode(', ', $this->address1);
      $address_q = $address_p = array();
      if (count($address) > 1) {
        foreach (array_slice($address, 1) as $line) {
          $address_q[] = 'address1 like ?';
          $address_p[] = $address[0] . '%' . $line . '%';
        }
      }
      else {
        $address_q[] = 'address1 like ?';
        $address_p[] = $address[0] . '%';
      }
      $query->andWhere(implode(' or ', $address_q), $address_p);

    $having_q = array();
    $having_p = array();

    if ($this->type == 'commercial-sale' || $this->type == 'commercial-rent') {
      foreach ($this->LotInfo as $lot_info) {
        if ($lot_info->field_id == 45) {
          $q = $vals = array();
          foreach (explode(', ', $lot_info->value) as $i => $row) {
            if ($i == 0) {
              $q[] = 'Lot.LotInfo.field_id = 45 and Lot.LotInfo.value like ?';
            }
            else {
              $q[] = '( Lot.LotInfo.field_id = 45 and Lot.LotInfo.value like ? )';
            }

            $vals[] = "%$row%";
          }
          $having_q[] = implode(' or ', $q);
          $having_p = array_merge($having_p, $vals);
          break;
        }
      }
    }

    $fields = self::$_similar_fields[$this->type];

    foreach ($this->LotInfo as $lot_info) {
      if (in_array($lot_info->field_id, $fields) && $lot_info->value > 0) {
        $having_q[] = 'Lot.LotInfo.field_id = ? and Lot.LotInfo.value + 0 between ? and ?';
        $having_p = array_merge($having_p, array($lot_info->field_id, $lot_info->value * 0.9, $lot_info->value * 1.1));
        break;
      }
    }

    if (count($having_q)) {
      $query->andWhere(implode(' or ', $having_q), $having_p);
      $query->groupBy('Lot.id');
      $query->addHaving('count(Lot.id) >= ?', count($having_q));
    }

    if (!is_null($limit)) {
      $query->limit($limit);
    }

    return $query->execute();
  }

  public function getOffset() {
    return $this->contains('offset') ? $this->_get('offset') : null;
  }

  public function setOffset($value) {
    $this->mapValue('offset', $value);
  }

  public function getHash() {
    return $this->contains('hash') ? $this->_get('hash') : null;
  }
  public function setHash($value) {
    $this->mapValue('hash', $value);
  }

  public function setImages($value) {
    if (is_array($value)) {
      $value = implode(',', $value);
    }
    return $this->_set('images', strip_tags($value));
  }

  public function getImages() {
    if (!preg_match('/cian\.ru/', $this->organization_link)) {
      $images = explode(',', $this->_get('images'));
    }
    return !empty($images[0]) ? $images : array();
  }


  public function getAddressFull() {
    return preg_replace('/\,\s+$/', '', sprintf('%s, %s', $this->address1, $this->address2));
  }
  
  public function getAddressWithoutRegion() {
    $newAddr =  preg_split("/[,]+/", $this->address1, 2);
    if(!empty($newAddr[1])) {return preg_replace('/\,\s+$/', '', sprintf('%s, %s', $newAddr[1], $this->address2));}
    else {return preg_replace('/\,\s+$/', '', sprintf('%s, %s', $newAddr[0], $this->address2));}
  }

  public function getBaseInfo($lotInfo = null) {
    $fields = self::$_base_fields[$this->type];
    $text = array_combine($fields, array_fill(0, count($fields), 0));

    if ($lotInfo != null){
      foreach ($lotInfo as $lot_info) {
        if (in_array($lot_info->field_id, $fields)) {
          $text[$lot_info->field_id] = $lot_info->value;
        }
      }
    }
    else {
      foreach ($this->LotInfo as $lot_info) {
        if (in_array($lot_info->field_id, $fields)) {
          $text[$lot_info->field_id] = $lot_info->value;
        }
      }
    }

    $text = implode('/', $text);

    if (!in_array($this->type, array('apartament-sale', 'apartament-rent'))) {
      $text = '<abbr title="помещение/земля">Площадь</abbr>: ' . $text;
    }

    return $text;
  }

  public function getTypeText() {
    $names = sfConfig::get('app_lot_types');
    return $names[$this->type]['name'];
  }

  public function getFieldsArray(){
    $query = Doctrine::getTable('LotInfo')->createQuery('l')
      ->select('l.field_id, l.value')
      ->andWhere('l.lot_id = ?', array($this->id))
      ->execute();
    return $this->getBaseInfo($query);
  }

  public function getImagePath($create = true)
  {
    return Toolkit::buildStoragePath('lot', $this->id, true, $create);
  }

  public function getFullImagePath($create = true, $source = true) {
    return Toolkit::buildStoragePath('lot', $this->id, false, $create, true);
  }

  public static function getLotsForDirection($direction = null, $type = null)
  {
    if (null != $direction && null != $type) {
      //TODO change this to Sphinx
      $query = Doctrine::getTable('Lot')->createQueryActive('l')
        ->andWhere('l.region_id = ?', 50)
        ->andWhere('l.type = ?', $type)
        ->andWhere('l.created_at <= ?', date('Y-m-d H:i:s'));

      $regionnodes = self::$direction_regionnodes[$direction];
      $node_string = '';
      $i = 0;
      foreach ($regionnodes as &$node) {
        $node = '%' . $node . '%';
        if ($i == 0) {
          $node_string = 'l.address1 LIKE ?';
        }else {
          $node_string .= ' OR l.address1 LIKE ?';
        }
        $i++;
      }

      $lots = $query->andWhere($node_string, $regionnodes)
        ->limit(10)
        ->orderBy('l.rating desc')
        ->execute();

      if ($lots) {
        return $lots;
      }
    }
    return false;
  }

  /**
   * Get value from additional field by id
   *
   * @param int $field_id
   * @return string
   */
  public function getLotInfoField($field_id)
  {
    foreach ($this->LotInfo as $info) {
      if ($info->field_id == $field_id) {
        return trim($info->value);
      }
    }
    return null;
  }

  public function getRegionnode($all_nodes = false)
  {
    if ($region_node = $this->address_info['region_node']) {
      if(is_array($region_node)) {
        if($all_nodes) {
          return Doctrine::getTable('Regionnode')->createQuery()->
            andWhereIn('id', $region_node)->execute();
        }
        else {
          $region_node = array_shift($region_node);
        }
      }
      return Doctrine::getTable('Regionnode')->find($region_node);
    }
  }

  public static function getRealType($type)
  {
    return array_key_exists($type, self::$_routing_types) ? self::$_routing_types[$type] : $type;
  }

  public static function getRoutingType($type)
  {
    $region = sfContext::getInstance()->getRequest()->getParameter('region_id', Toolkit::getRegionId());
    if($region == 50 && $type == 'new_building-sale')
      $routing_type = 'novostroyki-v-podmoskovie';
    else
      $routing_type = array_search($type, self::$_routing_types);
    
    return $routing_type ?  $routing_type : $type;
  }

  public function getLotInfoFieldForLanding()
  {
    return $this->getLotInfoField(self::$_base_fields_for_landing[$this->type]);
  }
  
  public function getPrepearedLotInfoField($field_id){
    $result = $this->getLotInfoField($field_id);
    
    switch ($this->type) {
      case 'cottage-sale':
        $result = preg_replace('#\s*п(о|а)с(е|ё)лок\s*#u', '', $result);
        $result = empty($result) ? $this->address_info['city_region'] : $result;
        break;
    }
    
    return $result;
  }

  public function getTypeCottages($type) {
    $typeOfCottages = array();
    foreach ($this->Cottages as $cottage) {
      if ($cottage->type == $type) {
       $typeOfCottages[] = $cottage;
      }
    }
    return $typeOfCottages;
  }
}
