<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class FormField extends BaseFormField
{
  public $choice_strategy = 'use';

  public function __toString() {
    return $this->label;
  }

  public function getChoices($add_empty = false, $empty_value = ' ') {
    $choices = array();
    $empty = array('' => $empty_value);

    foreach(explode("\n", preg_replace('/(^\s+)|(\s+$)/', '', $this->value)) as $choice) {
      $choice = trim($choice);
      if ($choice != 'нет' || !$add_empty) {
        $choices[$choice] = $choice;
      }
      elseif ($this->choice_strategy == 'use') {
        $empty = array('нет' => 'нет');
      }
    }

    if ($add_empty) {
      $choices = array_merge($empty, $choices);
    }

    return $choices;
  }

  public function getWidget(array $fieldinfo = array())
  {
    $widget_options = $widget_attributes = array();

    switch($this->type) {
      case 'integer':
        $widget_type = 'sfWidgetFormInput';
        break;

      case 'float':
        $widget_type = 'sfWidgetFormInput';
        break;

      case 'boolean':
        $widget_type = 'sfWidgetFormInputCheckbox';
        break;

      case 'year':
        $this->size = 4;
        $widget_type = 'sfWidgetFormInput';
        break;

      case 'price':
        $widget_type = 'sfWidgetFormInputPrice';
        $widget_options['currency'] =  DynamicForm::$currencies;
        break;

      case 'select':
        $widget_type = 'sfWidgetFormSelect';
        $empty_val = isset($fieldinfo['empty']) ? $fieldinfo['empty'] : ' ';
        $widget_options['choices'] = $this->getChoices(true, $empty_val);
        break;

      case 'multiple':
        $widget_type = 'sfWidgetFormSelectCheckbox';
        $widget_options['choices'] = $this->getChoices();
        break;

      case 'radio':
        $widget_type = 'sfWidgetFormSelectRadio';
        $widget_options['choices'] = $this->getChoices();
        break;
      
      case 'input':
        $widget_type = 'sfWidgetFormInput';
        break;

      case 'radiocombo':
        $widget_type = 'sfWidgetFormRadioCombo';
        $widget_options['choices'] = $this->getChoices();
        break;

      default:
        throw new sfException(sprintf('Field type "%s" not supported yet.', $this->type));
    }

    $widget_options['label'] = (!empty($fieldinfo['required']) ? '* ' : '') . $this->label;
    if ($this->size && $widget_type == 'sfWidgetFormInput') {
      $widget_attributes['size'] = $widget_attributes['maxlength'] = $this->size;
    }
    if (!empty($fieldinfo['show_additional_header'])) {
      $widget_attributes['show_additional_header'] = true;
    }
    
    // price fields
    if (!in_array($this->id, array(2, 16, 53))) {
      $widget_attributes['rating'] = $this->rating;
    }

    return new $widget_type($widget_options, $widget_attributes);
  }

  public function getValidator(array $fieldinfo = array())
  {
    $validator_options = array('trim' => true);

    switch($this->type) {
      case 'integer':
        $validator_type = 'sfValidatorInteger';
        break;

      case 'float':
        $validator_type = 'sfValidatorFloat';
        break;

      case 'boolean':
        $validator_type = 'sfValidatorBoolean';
        break;

      case 'year':
        $this->size = 4;
        $validator_type = 'sfValidatorInteger';
        $validator_options['min'] = date('Y') - 150;
        $validator_options['max'] = date('Y') + 50;
        break;

      case 'price':
        $validator_type = 'sfValidatorPrice';
        $validator_options['min'] = 1;
        $validator_options['currencies'] = array_keys(DynamicForm::$currencies);
        break;

      case 'select':
        $validator_type = 'sfValidatorChoice';
        $validator_options['choices'] = array_keys($this->getChoices());
        break;

      case 'multiple':
        $validator_type = 'sfValidatorChoice';
        $validator_options['choices'] = array_keys($this->getChoices(false));
        if($this->id == '45') {
          $validator_options['max'] = 3;
        }
        $validator_options['multiple'] = true;
        break;

      case 'radio':
        $validator_type = 'sfValidatorChoice';
        $validator_options['choices'] = array_keys($this->getChoices(false));
        break;

      case 'radiocombo':
        $validator_type = 'sfValidatorString';
        break;
      
      case 'input':
        $validator_type = 'sfValidatorString';
        break;

      default:
        throw new Exception(sprintf('Field type "%s" not supported yet.', $this->type));

    }
    $validator_options['required'] = !empty($fieldinfo['required']);
    return new $validator_type($validator_options);
  }

  public static function getCurrencyTypes($type = false)
  {
    switch ($type) {
      case  'apartament-rent':
        $field = Doctrine::getTable('FormField')->find(68);
        return $field->getChoices();        
      case  'commercial-rent':
        $field = Doctrine::getTable('FormField')->find(69);
        return $field->getChoices();        
      default:
        return false;
    }
  }
}