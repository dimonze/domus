<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PostTable extends Doctrine_Table
{

  public function getMyNews($user_id) {
    return $this->createQuery()
      ->where('author_id = ?', $user_id)
      ->andWhere('post_type = ?', 'news')
      ->orderBy('created_at desc');
  }

  public function getMyArticle($user_id) {
    return $this->createQuery()
      ->where('author_id = ?', $user_id)
      ->andWhere('post_type = ?', 'article');
  }

  public function getMaxMinYears($module = null, $post_theme_id = null, $region_id = null, $section = null) {
    if (null == $module || null == $post_theme_id || null == $region_id || null == $section) {
      throw new Exception('You not add valid parameters');
    }
    $query = $this->createQuery('p')
        ->select('MAX(YEAR(p.created_at)), MIN(YEAR(p.created_at))')
        ->leftJoin('p.PostTheme t')
        ->leftJoin('p.PostRegion r')
        ->where('t.theme_id = ?', $post_theme_id)
        ->addWhere('r.region_id = ?', $region_id)
        ->andWhere('p.section = ?', $section)
        ->setHydrationMode(Doctrine::HYDRATE_NONE)
        ->execute();

    $output = array('min_year' => $query[0][1], 'max_year' => $query[0][0]);

    return $output;
  }

  public function getNbItemsPerDay($year, $month, $module = null, $post_theme_id = null, $region_id = null, $section = null) {
    if (null == $module || null == $post_theme_id || null == $region_id || null == $section) {
      throw new Exception('You not add valid parameters');
    }
    $output = array();
    $next_month = date('Y-m', strtotime("$year-$month + 1 month"));
    $rs = $this->createQuery('p')
        ->select('DAYOFMONTH(p.created_at) day, COUNT(*)')
        ->leftJoin('p.PostTheme t')
        ->leftJoin('p.PostRegion r')
        ->where('t.theme_id = ?', $post_theme_id)
        ->addWhere('r.region_id = ?', $region_id)
        ->andWhere('p.section = ?', $section)
        ->andWhere('p.created_at > ?', "$year-$month")
        ->andWhere('p.created_at < ?', $next_month)
        ->orderBy('day')
        ->groupBy('day')
        ->setHydrationMode(Doctrine::HYDRATE_NONE)
        ->execute();

    foreach ($rs as $v) {
      $output[$v[0]] = $v[1];
    }

    return $output;
  }

  public function createQueryActive($alias = '') {
    return $this->createQuery($alias)->andWhere($alias . '.status = ?', 'publish');
  }

  public function createQuery($alias = '') {
    if (!empty($alias)) {
      $alias = ' ' . trim($alias);
    }
    $query = Doctrine_Query::create($this->_conn, 'PostQuery')
      ->from($this->getComponentName() . $alias);
    if('backend' != sfConfig::get('sf_app')) {
      $query->andWhere($alias . '.status = ?', 'publish');
    }
    return $query;
  }

  public function getLatestNews($section = null, $theme_id = null, $region_id = null) {
    if (null == $section || null == $theme_id || null == $region_id) {
      return false;
    }

    return $this->createQuery('p')
      ->select('p.title, p.lid, p.created_at')
      ->leftJoin('p.PostRegion r')
      ->leftJoin('p.PostTheme t')
      ->andWhere('p.post_type = ?', 'news')
      ->andWhere('p.is_primary = ?', 0)
      ->andWhere('p.status = ?', 'publish')
      ->andWhere('p.created_at <= ?', date('Y-m-d H:i:s'))
      ->andWhere('r.region_id = ?', $region_id)
      ->andWhere('t.theme_id = ?', $theme_id)
      ->andWhere('p.section = ?', $section)
      ->orderBy('p.created_at desc')
      ->limit(10)
      ->execute();
  }

  public function getQaForDay($date = null) {
    return $this->createQueryActive('p')
      ->leftJoin('p.PostRegion r')
      ->andWhere('p.post_type = ?', 'qa')
      ->andWhere('p.created_at like ?', $date . '%')
      ->orderBy('p.created_at DESC');
  }

  public function getAllQuestionnaires() {
    return $this->getAllQuestionnairesQuery()
      ->execute();
  }
 public function getAllQuestionnairesQuery() {
    return $this->createQuery('p')
      ->where('p.post_type = ?', 'questionnaire')
      ->orderBy('p.created_at DESC');
 }

  public function getActiveQuestionnaires() {
    return $this->getAllQuestionnairesQuery()
    ->andwhere('p.status = ?', 'publish')
      ->execute();
  }

  public function getActiveQuestionnaire($id) {
    $q = $this->getAllQuestionnairesQuery()
    ->andwhere('p.status = ?', 'publish')
    ->andWhere('p.id = ?', $id)
    ->fetchOne();

    if (count($q))
      return $q;
    else
      return false;
  }

  public function getRandomQuestionnaire() {
    $q = $this->getAllQuestionnairesQuery()
      ->andwhere('p.status = ?', 'publish')
      ->andWhere('p.id = ?', $id)
      ->orderBy('RAND')
      ->fetchOne();
  }


  public function getInactiveQuestionnairesQuery() {
    return $this->getAllQuestionnairesQuery()
      ->andwhere('p.status = ?', 'inactive');
  }

}