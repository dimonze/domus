<?php

/**
 * LandingPage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    domus
 * @subpackage model
 * @author     Garin Studio
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class LandingPage extends BaseLandingPage
{
  public static $types = array(
    'new_building-sale' => 'Продажа новостроек',
    'apartament-sale' => 'Продажа квартир/комнат',
    'apartament-rent' => 'Аренда квартир/комнат',
    'house-sale' => 'Продажа домов/участков',
    'house-rent' => 'Аренда домов/участков',
    'commercial-sale' => 'Продажа коммерческой недвижимости',
    'commercial-rent' => 'Аренда коммерческой недвижимости',
    'cottage-sale' => 'Продажа коттеджных поселков'
  ),
  $suptypes = array(
    'apartament', 'house', 'commercial', 'new_building', 'cottage'
  ),
  $preprocessed_regions = array(77, 50),
  $cache_path = 'lp_links';

  public function getTypeStr() {
    return self::$types[parent::getType()];
  }

  public static function getCachePath()
  {
    return sfConfig::get('sf_data_dir') . '/' . self::$cache_path;
  }

  public static function getRegionFolder($region)
  {
    return sprintf('%s/%s', self::getCachePath(), $region);
  }

  public static function getFilenameFor($region, $type)
  {
    return sprintf('%s/%s/%s.html', self::getCachePath(), $region, $type);
  }

  public static function getCached($region, $type)
  {
    return file_get_contents(self::getFilenameFor($region, $type));
  }
  
  public function save(Doctrine_Connection $conn = null) {
    $modified = $this->getModified();
    if ($this->isNew() || (!empty($modified) && isset($modified['params']))
     || (empty($this->latitude) || empty($this->longitude))) {
      //fetch coords
      $this->fetchCoords();
    }
    parent::save($conn);    
  }
  
  protected function fetchCoords()
  {
    $geo = false;
    $location = array($this->Region->name);
    
    if (!empty($this->params['regionnode']) && count($this->params['regionnode']) > 0) {
      $location = array_merge($location, $this->params['regionnode']);
    }
    if (!empty($this->params['q_text']) && mb_strlen($this->params['q_text']) > 3) {
      array_push($location, $this->params['q_text']);
    }
    
    try {
      $geo = Geocoder::getCoords(implode(' ', $location));
    } catch (Exception $exc) {}

    if (!$geo) {
      try {
        $geo = Geocoder::getCoords($this->Region->name);
      } catch (Exception $exc) {}
    }

    if ($geo) {
      $this->latitude = $geo['lat'];
      $this->longitude = $geo['lng'];
    }
    return true;
  }

}
